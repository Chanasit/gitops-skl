---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
data:
  init.sql: |
    CREATE DATABASE mydatabase;
    CREATE USER myuser WITH PASSWORD 'mypassword';
    GRANT ALL PRIVILEGES ON DATABASE mydatabase TO myuser;

    CREATE DATABASE testdb;
    GRANT ALL PRIVILEGES ON DATABASE testdb TO postgres;

    \c testdb;
    CREATE TABLE test(
      id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
      name TEXT NOT NULL,
      archived BOOLEAN NOT NULL DEFAULT FALSE
    );
    INSERT INTO test (name, archived)
      VALUES ('test row 1', true),
      ('test row 2', false);
    CREATE TABLE tutorials(
      "id" INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
      "title" TEXT NOT NULL,
      "description" TEXT NOT NULL,
      "published" BOOLEAN NOT NULL DEFAULT FALSE,
      "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT now(),
      "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT now()
    );
    INSERT INTO tutorials (title, description, published)
      VALUES ('title 1', 'desc 1', true),('title 2', 'desc 2', true);
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-secret
  labels:
    app: postgres
data:
  POSTGRES_DB: "postgres"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "123"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /data/postgresql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-volume-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
        - name: init-script
          image: busybox
          command: ['sh', '-c', 'echo "Initialization complete" && sleep 10']
      containers:
        - name: postgres
          image: 'postgres:16'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-secret
          volumeMounts:
            - name: postgresdata
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
          readinessProbe:
            exec:
              command:
                - psql
                - -U
                - postgres
                - -d
                - postgres
                - -c
                - 'SELECT 1'
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command:
                - psql
                - -U
                - postgres
                - -d
                - postgres
                - -c
                - 'SELECT 1'
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 6
      volumes:
        - name: init-script
          configMap:
            name: postgres-init-script
        - name: postgresdata
          persistentVolumeClaim:
            claimName: postgres-volume-claim
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
    - port: 5432
  selector:
    app: postgres
